package app

import (
	"net/http"
	"encoding/json"
	"io/ioutil"
    _ "errors"

	{{$hasPathParameters := false}}
	{{range .Endpoints}}{{if .ApiPath | isPathParam}}{{$hasPathParameters = true}}{{end}}{{end}}
	{{if $hasPathParameters}}
	"github.com/gorilla/mux"
	{{end}}

	"github.com/kosha/{{.ConnectorName}}-connector/pkg/models"
	"github.com/kosha/{{.ConnectorName}}-connector/pkg/httpclient"
)

func (a *App) listConnectorSpecification(w http.ResponseWriter, r *http.Request) {
	//Allow CORS here By * or specific origin
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Headers", "*")
	w.Header().Set("Access-Control-Allow-Methods", "*")

	respondWithJSON(w, http.StatusOK, map[string]string{
        {{if eq .Auth.Type "Basic Authentication"}}
		"USERNAME":    "{{.ConnectorName}} Username",
		"PASSWORD":    "{{.ConnectorName}} Password",
		{{else if eq .Auth.Type "Custom"}}
		{{- range .Auth.Spec}}
		"{{ . | ToUpper }}": "{{$.ConnectorName}} {{.}}",
		{{- end}}
        {{end}}
	})
}

func (a *App) testConnectorSpecification(w http.ResponseWriter, r *http.Request) {

	//Allow CORS here By * or specific origin
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Headers", "*")
	w.Header().Set("Access-Control-Allow-Methods", "*")

	if (*r).Method == "OPTIONS" {
		w.WriteHeader(200)
		return
	}

	var s models.Specification
	decoder := json.NewDecoder(r.Body)
	if err := decoder.Decode(&s); err != nil {
		a.Log.Errorf("Error parsing json payload", err)
		respondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}
	defer r.Body.Close()

	{{if eq .Auth.Type "Basic Authentication"}}
	account := httpclient.GetAccount(s.Username, s.Password, r.URL.Query())
	if account != nil {
		respondWithJSON(w, http.StatusOK, account)
	} else {
		respondWithError(w, http.StatusBadRequest, "Account not verified")
	}
	{{end}}
}

{{range .Endpoints}} 
func (a *App) {{.Name}}(w http.ResponseWriter, r *http.Request) {
	//Allow CORS here By * or specific origin
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Headers", "*")
	w.Header().Set("Access-Control-Allow-Methods", "*")

	{{if eq $.Auth.Type "Basic Authentication"}}
	{{if .ApiPath | isPathParam}}
	vars := mux.Vars(r)
	id := vars["id"]
	{{end}}
	{{if or (eq .Method "POST") (eq .Method "PUT")}}
	var bodyBytes []byte
	if r.Body != nil {
		bodyBytes, _ = ioutil.ReadAll(r.Body)
	} else {
		respondWithError(w, http.StatusBadRequest, "Empty Body")
	}
	{{end}}
	{{if and (or (eq .Method "POST") (eq .Method "PUT")) (.ApiPath | isPathParam)}} 
	res, err := httpclient.{{ .Name | Title }}(id, a.Cfg.GetUsername(), a.Cfg.GetPassword(), bodyBytes, r.URL.Query())
	{{else if or (eq .Method "POST") (eq .Method "PUT")}} 
	res, err := httpclient.{{ .Name | Title }}(a.Cfg.GetUsername(), a.Cfg.GetPassword(), bodyBytes, r.URL.Query())
	{{else if and (or (eq .Method "GET") (eq .Method "DELETE")) (.ApiPath | isPathParam)}}
	res, err := httpclient.{{ .Name | Title }}(id, a.Cfg.GetUsername(), a.Cfg.GetPassword(), r.URL.Query())
	{{else if or (eq .Method "GET") (eq .Method "DELETE")}}
	res, err := httpclient.{{ .Name | Title }}(a.Cfg.GetUsername(), a.Cfg.GetPassword(), r.URL.Query())
	{{end}}
	if err != nil {
		a.Log.Errorf("Error in {{ .Name }}", err)
		respondWithError(w, http.StatusBadRequest, err.Error())
	}
	respondWithJSON(w, http.StatusOK, res)
	{{end}}
}
{{end}}
