package httpclient

import (
	{{if eq .Auth.Type "Basic Authentication"}}
	"encoding/base64"
	{{end}}
	"io/ioutil"
	"net/http"
	"net/url"
	// "fmt"
	// "strconv"
)

{{if eq .Auth.Type "Basic Authentication"}}
func basicAuth(username string, password string) string {
	auth := username + ":" + password
	return base64.StdEncoding.EncodeToString([]byte(auth))
}
{{end}}

func makeHttpReq(username string, password string, req *http.Request, params url.Values) []byte {
	{{if eq .Auth.Type "Basic Authentication"}}
	req.Header.Add("Authorization", "Basic "+basicAuth(username, password))
	{{end}}
	req.URL.RawQuery = params.Encode()
	client := &http.Client{}

	resp, err := client.Do(req)
	if err != nil {
		return nil
	}

	defer resp.Body.Close()
	bodyBytes, _ := ioutil.ReadAll(resp.Body)

	return bodyBytes
}

{{if .Auth.MeEndpoint }} 
func GetAccount(username string, password string, params url.Values) interface{} {
	req, err := http.NewRequest("{{ .Auth.MeEndpoint.Method }}", "{{ .Auth.Domain }}"+"{{ .Auth.MeEndpoint.Path }}", nil)
	if err != nil {
		return nil
	}

	res := makeHttpReq(username, password, req, params)
	return res
}
{{end}}

{{range .Endpoints}} 
func {{ .Name | Title }}(username string, password string, params url.Values) (string, error) {
	req, err := http.NewRequest("{{ .Method }}", "{{ $.Auth.Domain }}"+"{{ .ApiPath }}", nil)
	if err != nil {
		return "", err
	}
	req.Header.Set("Content-Type", "application/json; charset=utf-8")

	return string(makeHttpReq(username, password, req, params)), nil
}
{{end}}
